# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer
T = TypeVar('T')
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_detect_entire_series_request(
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = '/timeseries/entire/detect'

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_detect_last_point_request(
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = '/timeseries/last/detect'

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_detect_change_point_request(
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = '/timeseries/changepoint/detect'

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )

class AnomalyDetectorClientOperationsMixin(object):

    @distributed_trace
    def detect_entire_series(
        self,
        body: JSONType,
        **kwargs: Any
    ) -> JSONType:
        """Detect anomalies for the entire series in batch.

        This operation generates a model with an entire series, each point is detected with the same
        model. With this method, points before and after a certain point are used to determine whether
        it is an anomaly. The entire detection can give user an overall status of the time series.

        :param body: Time series points and period if needed. Advanced model parameters can also be set
         in the request.
        :type body: JSONType
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "customInterval": 0,  # Optional. Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {"granularity":"minutely", "customInterval":5}.
                    "granularity": "str",  # Optional. Optional argument, can be one of yearly, monthly, weekly, daily, hourly, minutely, secondly, microsecond or none. If granularity is not present, it will be none by default. If granularity is none, the timestamp property in time series point can be absent. Possible values include: "yearly", "monthly", "weekly", "daily", "hourly", "minutely", "secondly", "microsecond", "none".
                    "maxAnomalyRatio": 0.0,  # Optional. Optional argument, advanced model parameter, max anomaly ratio in a time series.
                    "period": 0,  # Optional. Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.
                    "sensitivity": 0,  # Optional. Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.
                    "series": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. Optional argument, timestamp of a data point (ISO8601 format).
                            "value": 0.0  # Required. The measurement of that point, should be float.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "expectedValues": [
                        0.0  # Required. ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.
                    ],
                    "isAnomaly": [
                        bool  # Required. IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
                    ],
                    "isNegativeAnomaly": [
                        bool  # Required. IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.
                    ],
                    "isPositiveAnomaly": [
                        bool  # Required. IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.
                    ],
                    "lowerMargins": [
                        0.0  # Required. LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.
                    ],
                    "period": 0,  # Required. Frequency extracted from the series, zero means no recurrent pattern has been found.
                    "upperMargins": [
                        0.0  # Required. UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.
                    ]
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = body

        request = build_detect_entire_series_request(
            content_type=content_type,
            json=_json,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def detect_last_point(
        self,
        body: JSONType,
        **kwargs: Any
    ) -> JSONType:
        """Detect anomaly status of the latest point in time series.

        This operation generates a model using points before the latest one. With this method, only
        historical points are used to determine whether the target point is an anomaly. The latest
        point detecting operation matches the scenario of real-time monitoring of business metrics.

        :param body: Time series points and period if needed. Advanced model parameters can also be set
         in the request.
        :type body: JSONType
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "customInterval": 0,  # Optional. Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {"granularity":"minutely", "customInterval":5}.
                    "granularity": "str",  # Optional. Optional argument, can be one of yearly, monthly, weekly, daily, hourly, minutely, secondly, microsecond or none. If granularity is not present, it will be none by default. If granularity is none, the timestamp property in time series point can be absent. Possible values include: "yearly", "monthly", "weekly", "daily", "hourly", "minutely", "secondly", "microsecond", "none".
                    "maxAnomalyRatio": 0.0,  # Optional. Optional argument, advanced model parameter, max anomaly ratio in a time series.
                    "period": 0,  # Optional. Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.
                    "sensitivity": 0,  # Optional. Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.
                    "series": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. Optional argument, timestamp of a data point (ISO8601 format).
                            "value": 0.0  # Required. The measurement of that point, should be float.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "expectedValue": 0.0,  # Required. Expected value of the latest point.
                    "isAnomaly": bool,  # Required. Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.
                    "isNegativeAnomaly": bool,  # Required. Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.
                    "isPositiveAnomaly": bool,  # Required. Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.
                    "lowerMargin": 0.0,  # Required. Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin.
                    "period": 0,  # Required. Frequency extracted from the series, zero means no recurrent pattern has been found.
                    "suggestedWindow": 0,  # Required. Suggested input series points needed for detecting the latest point.
                    "upperMargin": 0.0  # Required. Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed.
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = body

        request = build_detect_last_point_request(
            content_type=content_type,
            json=_json,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def detect_change_point(
        self,
        body: JSONType,
        **kwargs: Any
    ) -> JSONType:
        """Detect change point for the entire series.

        Evaluate change point score of every series point.

        :param body: Time series points and granularity is needed. Advanced model parameters can also
         be set in the request if needed.
        :type body: JSONType
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "customInterval": 0,  # Optional. Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {"granularity":"minutely", "customInterval":5}.
                    "granularity": "str",  # Required. Can only be one of yearly, monthly, weekly, daily, hourly, minutely or secondly. Granularity is used for verify whether input series is valid. Possible values include: "yearly", "monthly", "weekly", "daily", "hourly", "minutely", "secondly", "microsecond", "none".
                    "period": 0,  # Optional. Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.
                    "series": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. Optional argument, timestamp of a data point (ISO8601 format).
                            "value": 0.0  # Required. The measurement of that point, should be float.
                        }
                    ],
                    "stableTrendWindow": 0,  # Optional. Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection.
                    "threshold": 0.0  # Optional. Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is, the larger the trend error will be which means less change point will be accepted.
                }

                # response body for status code(s): 200
                response.json() == {
                    "confidenceScores": [
                        0.0  # Optional. the change point confidence of each point.
                    ],
                    "isChangePoint": [
                        bool  # Optional. isChangePoint contains change point properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
                    ],
                    "period": 0  # Optional. Frequency extracted from the series, zero means no recurrent pattern has been found.
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[JSONType]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = body

        request = build_detect_change_point_request(
            content_type=content_type,
            json=_json,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


